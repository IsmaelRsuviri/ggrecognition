Create and Train a Deep Learning Model
Script for creating and training a deep learning network with the following properties:
Number of layers: 25
Number of connections: 24
Training setup file: C:\Users\Aussar\Desktop\TFG\CNN_galaxias\params_2021_07_02__23_54_34.mat
Run this script to create the network layers, import training and validation data, and train the network. The network layers are stored in the workspace variable layers. The trained network is stored in the workspace variable net.
To learn more, see Generate MATLAB Code From Deep Network Designer.
Auto-generated by MATLAB on 02-Jul-2021 23:54:38
Load Initial Parameters
Load parameters for network initialization. For transfer learning, the network initialization parameters are the parameters of the initial pretrained network.
trainingSetup = load("C:\Users\Aussar\Desktop\TFG\CNN_galaxias\params_2021_07_02__23_54_34.mat");

Import Data
Import training and validation data.
imdsTrain = imageDatastore("C:\Users\Aussar\Desktop\TFG\CNN_galaxias\TRAIN - copia (2)","IncludeSubfolders",true,"LabelSource","foldernames");
[imdsTrain, imdsValidation] = splitEachLabel(imdsTrain,0.7,"randomized");

Augmentation Settings
imageAugmenter = imageDataAugmenter(...
    "RandRotation",[-350 350],...
    "RandScale",[0.8 1.15],...
    "RandXReflection",true,...
    "RandYReflection",true);

% Resize the images to match the network input layer.
augimdsTrain = augmentedImageDatastore([227 227 3],imdsTrain,"DataAugmentation",imageAugmenter);
augimdsValidation = augmentedImageDatastore([227 227 3],imdsValidation);

Set Training Options
Specify options to use when training.
opts = trainingOptions("sgdm",...
    "ExecutionEnvironment","gpu",...
    "InitialLearnRate",0.0012,...
    "Momentum",0.87,...
    "Shuffle","every-epoch",...
    "Plots","training-progress",...
    "ValidationData",augimdsValidation,"minibatchSize",128);

Create Array of Layers
layers = [
    imageInputLayer([227 227 3],"Name","data","Mean",trainingSetup.data.Mean)
    convolution2dLayer([11 11],96,"Name","conv1","BiasLearnRateFactor",2,"Stride",[4 4],"Bias",trainingSetup.conv1.Bias,"Weights",trainingSetup.conv1.Weights)
    reluLayer("Name","relu1")
    crossChannelNormalizationLayer(5,"Name","norm1","K",1)
    maxPooling2dLayer([3 3],"Name","pool1","Stride",[2 2])
    groupedConvolution2dLayer([5 5],128,2,"Name","conv2","BiasLearnRateFactor",2,"Padding",[2 2 2 2],"Bias",trainingSetup.conv2.Bias,"Weights",trainingSetup.conv2.Weights)
    reluLayer("Name","relu2")
    crossChannelNormalizationLayer(5,"Name","norm2","K",1)
    maxPooling2dLayer([3 3],"Name","pool2","Stride",[2 2])
    convolution2dLayer([3 3],384,"Name","conv3","BiasLearnRateFactor",2,"Padding",[1 1 1 1],"Bias",trainingSetup.conv3.Bias,"Weights",trainingSetup.conv3.Weights)
    reluLayer("Name","relu3")
    groupedConvolution2dLayer([3 3],192,2,"Name","conv4","BiasLearnRateFactor",2,"Padding",[1 1 1 1],"Bias",trainingSetup.conv4.Bias,"Weights",trainingSetup.conv4.Weights)
    reluLayer("Name","relu4")
    groupedConvolution2dLayer([3 3],128,2,"Name","conv5","BiasLearnRateFactor",2,"Padding",[1 1 1 1],"Bias",trainingSetup.conv5.Bias,"Weights",trainingSetup.conv5.Weights)
    reluLayer("Name","relu5")
    maxPooling2dLayer([3 3],"Name","pool5","Stride",[2 2])
    fullyConnectedLayer(4096,"Name","fc6","BiasLearnRateFactor",2,"Bias",trainingSetup.fc6.Bias,"Weights",trainingSetup.fc6.Weights)
    reluLayer("Name","relu6")
    dropoutLayer(0.5,"Name","drop6")
    fullyConnectedLayer(4096,"Name","fc7","BiasLearnRateFactor",2,"Bias",trainingSetup.fc7.Bias,"Weights",trainingSetup.fc7.Weights)
    reluLayer("Name","relu7")
    dropoutLayer(0.5,"Name","drop7")
    fullyConnectedLayer(5,"Name","fc","BiasLearnRateFactor",20,"WeightLearnRateFactor",10)
    softmaxLayer("Name","prob")
    classificationLayer("Name","classoutput")];

Train Network
Train the network using the specified options and training data.
[net, traininfo] = trainNetwork(augimdsTrain,layers,opts);
yPred=classify(net,augimdsValidation)
yvalidation=imdsValidation.Labels
confusionchart(yvalidation,yPred)
plotconfusion(yvalidation,yPred)
